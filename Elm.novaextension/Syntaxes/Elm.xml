<?xml version="1.0" encoding="UTF-8"?>
<syntax name="dart">
    <meta>
        <name>Elm</name>
        <type>script</type>
        <preferred-file-extension>elm</preferred-file-extension>
    </meta>

    <detectors>
        <extension priority="1.0">elm</extension>
    </detectors>

    <indentation>
        <increase>
            <expression>(\{[^}\"']*$)|(\[[^\]\"']*$)|(\([^)\"']*$)</expression>
        </increase>
        <decrease>
            <expression>^\s*(\s*/\*.*\*/\s*)*[\}\]\)\\]</expression>
        </decrease>
    </indentation>

    <comments>
        <single>
            <expression>--</expression>
        </single>
        <multiline>
            <starts-with>
                <expression>{-</expression>
            </starts-with>
            <ends-with>
                <expression>-}</expression>
            </ends-with>
        </multiline>
    </comments>

    <brackets>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
    </brackets>

    <surrounding-pairs>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
        <pair open="&apos;" close="&apos;" />
        <pair open="&quot;" close="&quot;" />
        <pair open="“" close="”" />
        <pair open="‘" close="’" />
    </surrounding-pairs>

    <scopes>
        <include syntax="self" collection="comma" />
        <include syntax="self" collection="perens" />
        <include syntax="self" collection="comments" />
        <include syntax="self" collection="import" />
        <include syntax="self" collection="module" />
        <include syntax="self" collection="string-triple" />
        <include syntax="self" collection="string-quote" />
        <include syntax="self" collection="char" />
        <include syntax="self" collection="debug" />
        <include syntax="self" collection="period" />
        <include syntax="self" collection="square-brackets" />
        <include syntax="self" collection="record-prefix" />
        <include syntax="self" collection="infix-op" />

        <scope name="elm.keyword.unused">
            <expression>\b(_)\b</expression>
        </scope>
        <scope name="elm.constant.numeric.float">
            <expression>\b([0-9]+\.[0-9]+([eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\b</expression>
        </scope>
        <scope name="elm.constant.numeric">
            <expression>\b(0x[0-9a-fA-F]+)\b</expression>
        </scope>
        <scope name="elm.meta.record.field.update">
            <expression>(\{)\s+([a-z][a-zA-Z0-9_]*)\s+(\|)\s+([a-z][a-zA-Z0-9_]*)</expression>
            <capture number="1" name="elm.punctuation.bracket" />
            <capture number="2" name="elm.record.name" />
            <capture number="3" name="elm.keyword.pipe" />
            <capture number="4" name="elm.entity.name.record.field" />
        </scope>
        <scope name="elm.meta.record.field.update">
            <expression>(\|)\s+([a-z][a-zA-Z0-9_]*)\s+(\=)</expression>
            <capture number="1" name="elm.keyword.pipe" />
            <capture number="2" name="elm.entity.name.record.field" />
            <capture number="3" name="elm.keyword.operator.assignment" />
        </scope>
        <scope name="elm.meta.record.field.update">
            <expression>(\{)\s+([a-z][a-zA-Z0-9_]*)\s+$</expression>
            <capture number="1" name="elm.punctuation.bracket" />
            <capture number="2" name="elm.record.name" />
        </scope>
        <scope name="elm.meta.record.field">
            <expression>(\{)\s+([a-z][a-zA-Z0-9_]*)\s+(\=)</expression>
            <capture number="1" name="elm.punctuation.bracket" />
            <capture number="2" name="elm.entity.name.record.field" />
            <capture number="3" name="elm.keyword.operator.assignment" />
        </scope>
        <scope name="elm.meta.record.field">
            <expression>(,)\s+([a-z][a-zA-Z0-9_]*)\s+(\=)</expression>
            <capture number="1" name="elm.punctuation.separator.comma" />
            <capture number="2" name="elm.entity.name.record.field" />
            <capture number="3" name="elm.keyword.operator.assignment" />
        </scope>
        <scope name="elm.punctuation.bracket">
            <expression>(\}|\{)</expression>
        </scope>

    </scopes>

    <collections>

        <!-- !Comma -->
        <collection name="comma">
            <scope name="elm.punctuation.separator.comma">
                <expression>(,)</expression>
            </scope>
        </collection>

        <!-- !Perens -->
        <collection name="perens">
            <scope name="elm.punctuation.parens">
                <expression>(\(|\))</expression>
            </scope>
        </collection>

        <!-- !Comments -->
        <collection name="comments">
            <scope name="elm.comment.line.double-dash" spell-check="true">
                <starts-with>
                    <expression>--</expression>
                </starts-with>
                <ends-with>
                    <expression>$</expression>
                </ends-with>
                <capture number="0" name="elm.comment.punctuation.definition" />
            </scope>
            <scope name="elm.comment.block" spell-check="true">
                <starts-with>
                    <expression>\{-</expression>
                </starts-with>
                <ends-with>
                    <expression>-\}</expression>
                </ends-with>
                <capture number="0" name="elm.comment.punctuation.definition" />
            </scope>
        </collection>

        <!-- !Import -->
        <collection name="import">
            <scope name="elm.meta.import">
                <starts-with>
                    <expression>^\b(import)\s</expression>
                    <capture number="1" name="elm.keyword.control.import" />
                </starts-with>
                <ends-with>
                    <expression>$</expression>
                </ends-with>
                <subscopes>
                    <scope name="elm.keyword.control">
                        <expression>(as|exposing)</expression>
                    </scope>
                    <include syntax="self" collection="module-chunk" />
                    <include syntax="self" collection="period" />
                    <scope name="elm.punctuation.spaces">
                        <expression>\s+</expression>
                    </scope>
                    <include syntax="self" collection="module-exports" />
                </subscopes>
            </scope>
        </collection>

        <!-- !Module -->
        <collection name="module">
            <scope name="elm.meta.declaration.module">
                <starts-with>
                    <expression>^\b((port |effect )?module)\s+</expression>
                </starts-with>
                <ends-with>
                    <expression>\n(?!\s)</expression>
                </ends-with>
                <capture number="1" name="elm.keyword.other" />

                <subscopes anchored="true">
                    <include syntax="self" collection="module-chunk" />
                    <scope name="elm.keyword.other">
                        <expression>(exposing)</expression>
                    </scope>
                    <include syntax="self" collection="module-exports" />
                </subscopes>
            </scope>
        </collection>

        <!-- !String-triple -->
        <collection name="string-triple">
            <scope name="elm.string.quoted.triple">
                <starts-with>
                    <expression>&quot;&quot;&quot;</expression>
                </starts-with>
                <ends-with>
                    <expression>&quot;&quot;&quot;</expression>
                </ends-with>
                <capture number="0" name="elm.punctuation.definition.string.begin" />
                <subscopes>
                    <scope name="elm.constant.character.escape">
                        <expression>\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\&quot;&apos;\&amp;]|x[0-9a-fA-F]{1,5})</expression>
                    </scope>
                    <scope name="elm.constant.character.escape.control">
                        <expression>\^[A-Z@\[\]\\\^_]</expression>
                    </scope>
                </subscopes>
            </scope>
        </collection>

        <!-- !String-quote -->
        <collection name="string-quote">
            <scope name="elm.string.quoted.double">
                <starts-with>
                    <expression>&quot;</expression>
                    <capture number="0" name="elm.punctuation.definition.string.begin" />
                </starts-with>
                <ends-with>
                    <expression>&quot;</expression>
                    <capture number="0" name="elm.punctuation.definition.string.begin" />
                </ends-with>
                <subscopes>
                    <scope name="elm.constant.character.escape">
                        <expression>\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\&quot;&apos;\&amp;]|x[0-9a-fA-F]{1,5})</expression>
                    </scope>
                    <scope name="elm.constant.character.escape.control">
                        <expression>\^[A-Z@\[\]\\\^_]</expression>
                    </scope>
                </subscopes>
            </scope>
        </collection>

        <!-- !Char -->
        <collection name="char">
            <scope name="elm.string.quoted.single">
                <starts-with>
                    <expression>&apos;</expression>
                    <capture number="0" name="elm.punctuation.definition.char.begin" />
                </starts-with>
                <ends-with>
                    <expression>&apos;</expression>
                    <capture number="0" name="elm.punctuation.definition.char.begin" />
                </ends-with>
                <subscopes>
                    <scope name="elm.constant.character.escape">
                        <expression>\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\&quot;&apos;\&amp;]|x[0-9a-fA-F]{1,5})</expression>
                    </scope>
                    <scope name="elm.constant.character.escape.control">
                        <expression>\^[A-Z@\[\]\\\^_]</expression>
                    </scope>
                </subscopes>
            </scope>
        </collection>

        <!-- !Debug -->
        <collection name="debug">
            <scope name="elm.invalid.illegal.debug">
                <expression>\b(Debug)\b</expression>
            </scope>
        </collection>

        <!-- !Module-exports -->
        <collection name="module-exports">
            <scope name="elm.meta.declaration.exports">
                <starts-with>
                    <expression>(\()</expression>
                    <capture number="0" name="elm.punctuation.parens.module-export" />
                </starts-with>
                <ends-with>
                    <expression>(\))</expression>
                    <capture number="0" name="elm.punctuation.parens.module-export" />
                </ends-with>
                <subscopes>
                    <scope name="elm.entity.name.function">
                        <expression>\b[a-z][a-zA-Z_&apos;0-9]*</expression>
                    </scope>
                    <scope name="elm.storage.type">
                        <expression>\\b[A-Z][A-Za-z_&apos;0-9]*</expression>
                    </scope>
                    <scope name="elm.punctuation.separator.comma">
                        <expression>,</expression>
                    </scope>
                    <scope name="elm.punctuation.spaces">
                        <expression>\s+</expression>
                    </scope>
                    <include syntax="self" collection="comma" />
                    <scope name="elm.punctuation.parens.ellipses">
                        <expression>\(\.\.\)</expression>
                    </scope>
                    <scope name="elm.punctuation.parens.ellipses">
                        <expression>\.\.</expression>
                    </scope>
                    <include syntax="self" collection="infix-op" />
                    <scope name="elm.meta.other.unknown">
                        <expression>\(.*?\)</expression>
                    </scope>
                </subscopes>
            </scope>
        </collection>

        <!-- !Module-chunk -->
        <collection name="module-chunk">
            <scope name="elm.support.module">
                <expression>[A-Z][a-zA-Z0-9_]*</expression>
            </scope>
        </collection>

        <!-- !Period -->
        <collection name="period">
            <scope name="elm.keyword.other.period">
                <expression>[.]</expression>
            </scope>
        </collection>

        <!-- !Square-brackets -->
        <collection name="square-brackets">
            <scope name="elm.punctuation.definition.list">
                <expression>[\[\]]</expression>
            </scope>
        </collection>

        <!-- !Record-prefix -->
        <collection name="record-prefix">
            <scope name="elm.record.accessor">
                <expression>([a-z][a-zA-Z0-9_]*)(\.)([a-z][a-zA-Z0-9_]*)</expression>
                <capture number="1" name="elm.record.name" />
                <capture number="2" name="elm.keyword.other.period" />
                <capture number="3" name="elm.entity.name.record.field.accessor" />
            </scope>
        </collection>

        <!-- !Infix-op -->
        <collection name="infix-op">
            <scope name="elm.keyword.operator">
                <expression>(&lt;/&gt;|&lt;\?&gt;|&lt;\||&lt;=|\|\||&amp;&amp;|&gt;=|\|&gt;|\|=|\|\.|\+\+|::|/=|==|/|&gt;&gt;|&lt;&lt;|&lt;|&gt;|\^|\+|-|/|\*)</expression>
            </scope>
        </collection>

    </collections>
</syntax>
